<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net20;net40;net461;netstandard1.4;netstandard2.0;netstandard2.1</TargetFrameworks>
		<PackageId>AsyncEnumerable.Portable</PackageId>
		<AssemblyName>AsyncEnumerable</AssemblyName>
		<RootNamespace>Dasync.Collections</RootNamespace>
		<LangVersion>latest</LangVersion>
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<AssemblyOriginatorKeyFile>../AsyncEnumerable.pfx</AssemblyOriginatorKeyFile>
		<Authors>sergiis,dasync</Authors>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/Dasync/AsyncEnumerable</PackageProjectUrl>
		<Title>C# Async Streams features</Title>
		<Description>Introduces IAsyncEnumerable, IAsyncEnumerator, ForEachAsync(), and ParallelForEachAsync()
GitHub: https://github.com/Dasync/AsyncEnumerable

PROBLEM SPACE

Helps to (a) create an element provider, where producing an element can take a lot of time
due to dependency on other asynchronous events (e.g. wait handles, network streams), and
(b) a consumer that processes those element as soon as they are ready without blocking
the thread (the processing is scheduled on a worker thread instead).


EXAMPLE

using Dasync.Collections;

static IAsyncEnumerable&amp;lt;int&amp;gt; ProduceAsyncNumbers(int start, int end)
{
  return new AsyncEnumerable&amp;lt;int&amp;gt;(async yield =&amp;gt; {

    // Just to show that ReturnAsync can be used multiple times
    await yield.ReturnAsync(start);

    for (int number = start + 1; number &amp;lt;= end; number++)
      await yield.ReturnAsync(number);

    // You can break the enumeration loop with the following call:
    yield.Break();

    // This won't be executed due to the loop break above
    await yield.ReturnAsync(12345);
  });
}

// Just to compare with synchronous version of enumerator
static IEnumerable&amp;lt;int&amp;gt; ProduceNumbers(int start, int end)
{
  yield return start;

  for (int number = start + 1; number &amp;lt;= end; number++)
    yield return number;

  yield break;

  yield return 12345;
}

static async Task ConsumeNumbersAsync()
{
  var asyncEnumerableCollection = ProduceAsyncNumbers(start: 1, end: 10);
  await asyncEnumerableCollection.ForEachAsync(async number =&amp;gt; {
    await Console.Out.WriteLineAsync($"{number}");
  });
}

// Just to compare with synchronous version of enumeration
static void ConsumeNumbers()
{
  var enumerableCollection = ProduceNumbers(start: 1, end: 10);
  foreach (var number in enumerableCollection) {
    Console.Out.WriteLine($"{number}");
  }
}</Description>
		<RepositoryUrl>https://github.com/Dasync/AsyncEnumerable</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageReleaseNotes>4.0.0: Use interfaces from Microsoft.Bcl.AsyncInterfaces package in NET Standard 2.0.
3.1.0: Add support for NET Standard 2.1, consolidate interface with Microsoft's implementation.
2.2.0: New extension methods: SelectMany, Append, Prepend, OfType, Concat, Distinct, ToDictionaryAsync, ToLookupAsync, AggregateAsync.
2.1.0: New extension methods: Batch, UnionAll, Single, SingleOrDefault, DefaultIfEmpty, Cast.
2.0.0: Revise design of the library: same features, but slight paradigm shift and interface breaking changes.
1.5.0: Add support for .NET Standard, minor improvements.
1.4.2: Add finalizer to AsyncEnumerator and call Dispose in ForEachAsync and ParallelForEachAsync extension methods.
1.4.0: Add new generic type AsyncEnumeratorWithState for performance optimization.
       Now IAsyncEnumerator&amp;lt;T&amp;gt; is covariant.
       Add ForEachAsync, ParallelForeachAsync, and LINQ-style extension methods for IAsyncEnumerator.
1.2.1: New Linq-style extension methods in System.Collections.Async namespace.
1.1.0: Add ParallelForEachAsync extension methods for IEnumerable&amp;lt;T&amp;gt; and IAsyncEnumerable&amp;lt;T&amp;gt; in System.Collections.Async namespace.</PackageReleaseNotes>
		<PackageIcon>icon.png</PackageIcon>
		<SignAssembly>False</SignAssembly>
		<Version Condition="'$(RELEASE_VERSION)' != ''">$(RELEASE_VERSION)</Version>
		<VersionPrefix Condition="'$(RELEASE_VERSION)' == ''">4.0.2</VersionPrefix>
		<VersionSuffix Condition="'$(RELEASE_VERSION)' == ''">$([System.DateTime]::UtcNow.ToString(`yyyyMMdd-HHmm`))</VersionSuffix>
	</PropertyGroup>

	<ItemGroup>
	  <None Include="..\icon.png">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	  <None Include="..\README.md">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
	</ItemGroup>

	<ItemGroup Condition=" '$(TargetFramework)' == 'net40' or '$(TargetFramework)' == 'net20' or '$(TargetFramework)' == 'netstandard1.4' ">
		<PackageReference Include="Theraot.Core" Version="3.2.11" />
	</ItemGroup>

	<ItemGroup Condition=" '$(TargetFramework)' == 'net461' or '$(TargetFramework)' == 'netstandard2.0' ">
		<PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="1.0.0" />
	</ItemGroup>

	<ItemGroup Condition=" '$(TargetFramework)' == 'net461' or '$(TargetFramework)' == 'netstandard1.4' or '$(TargetFramework)' == 'netstandard2.0' ">
		<PackageReference Include="System.Threading.Tasks.Extensions" Version="4.5.2" />
	</ItemGroup>

</Project>